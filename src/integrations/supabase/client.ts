
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { SUPABASE_CONFIG, validateSupabaseConfig } from '@/config/supabase';

// Singleton pattern to prevent multiple client instances
class SupabaseClientSingleton {
  private static instance: ReturnType<typeof createClient<Database>> | null = null;
  private static isCreating = false;

  static getInstance(): ReturnType<typeof createClient<Database>> {
    if (!SupabaseClientSingleton.instance && !SupabaseClientSingleton.isCreating) {
      SupabaseClientSingleton.isCreating = true;
      
      try {
        validateSupabaseConfig();
        console.debug('Creating Supabase client instance');
        
        SupabaseClientSingleton.instance = createClient<Database>(
          SUPABASE_CONFIG.url, 
          SUPABASE_CONFIG.anonKey,
          {
            auth: {
              persistSession: true,
              autoRefreshToken: true,
              detectSessionInUrl: true,
              flowType: 'pkce'
            }
          }
        );
      } catch (error) {
        console.error('Failed to create Supabase client:', error);
        throw error;
      } finally {
        SupabaseClientSingleton.isCreating = false;
      }
    }
    
    return SupabaseClientSingleton.instance!;
  }

  static hasInstance(): boolean {
    return SupabaseClientSingleton.instance !== null;
  }
}

// Export the singleton client
export const supabase = SupabaseClientSingleton.getInstance();
